import asyncio
import json
import random
from datetime import datetime, timedelta
import base64
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.utils.media_group import MediaGroupBuilder
import magic
from config import logger, aiogram_bot
from database import db
from keyboards import main_kb
from states import SearchGirls, UkassaPayment, BuyGirl, ChatConnect, PeopleCount
from utils import inform_admins, Scheduler

router = Router()
timers = {}


async def get_mime_type(file_path):
    mime = magic.Magic(mime=True)
    mime_type = mime.from_file(file_path)
    return mime_type


async def is_video(file_path):
    mime_type = await get_mime_type(file_path)
    return mime_type.startswith('video')


async def is_photo(file_path):
    mime_type = await get_mime_type(file_path)
    return mime_type.startswith('image')


async def parse_media(path):
    return FSInputFile(path)


async def send_chat_request(hours: str, message: Message | CallbackQuery, g_id: int,
                            state: FSMContext, uid: int, ):
    schd = Scheduler()
    print(f'{hours=}')
    if int(hours) == 0:
        timing = 1 * 3600
        hours = 12
        await schd.schedule_review(timing=timing, message=message, g_id=g_id)
    else:
        timing = int(hours) * 3600
        await schd.schedule_review(timing=timing, message=message, g_id=g_id)

    print(f'schd timing {timing}')
    # await state.update_data(self_id=uid)
    if isinstance(message, Message):
        await message.reply("–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    else:
        await message.message.answer("–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")

    await state.set_state(ChatConnect.chatting)
    await state.update_data(user_1=uid, user_2=g_id)
    await db.set_user_state(uid, state=await state.get_state())
    print('user_1_state')
    print(await state.get_state())
    # Notify User 2 (replace USER_2_ID with the actual user id)
    user2_id = g_id
    print(uid, user2_id)
    data = await state.get_data()
    print(data)
    try:
        await aiogram_bot.send_message(user2_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å –≤–∞–º–∏.",
                                       reply_markup=main_kb.chat_menu(uid, hours))

    except Exception as e:
        logger.error(e)
        if isinstance(message, Message):
            await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.')
        else:
            await message.message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.')
        await state.clear()
        return


async def chat_timer(user_1_id, user_2_id, duration_hours):
    start_time = datetime.now()
    end_time = start_time + timedelta(hours=duration_hours, minutes=10)
    timers[user_1_id] = {'start': start_time, 'end': end_time, 'task': asyncio.current_task()}
    timers[user_2_id] = {'start': start_time, 'end': end_time, 'task': asyncio.current_task()}
    try:
        await asyncio.sleep(duration_hours * 3600 + 600)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∞—Å—ã –≤ —Å–µ–∫—É–Ω–¥—ã
        # –ó–¥–µ—Å—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
        await aiogram_bot.send_message(user_1_id, "–í—Ä–µ–º—è —á–∞—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ.")
        await aiogram_bot.send_message(user_2_id, "–í—Ä–µ–º—è —á–∞—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ.")
    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞
        if user_1_id in timers:
            del timers[user_1_id]
        if user_2_id in timers:
            del timers[user_2_id]


async def p_user_lk(callback: CallbackQuery):
    await callback.answer()
    uid = callback.from_user.id
    user_balance = await db.get_user_balance(uid)
    user_info = (f'<b>–í–∞—à ID</b>: {uid}'
                 f'\n<b>–ë–∞–ª–∞–Ω—Å:</b> {user_balance} —Ä—É–±–ª–µ–π')
    await callback.message.edit_text(user_info, reply_markup=main_kb.lk_menu())


async def p_add_balance(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>'
                                     '\n\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> 300 —Ä—É–±–ª–µ–π ')
    await state.set_state(UkassaPayment.input_value)


async def p_select_game(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:', reply_markup=main_kb.game_menu())


async def search_girls(girls: dict, callback: CallbackQuery, stop_event: asyncio.Event):
    await aiogram_bot.send_chat_action(callback.message.chat.id, 'typing')
    for girl in girls:
        if not stop_event.is_set():
            g_id = int(girl['user_id'])
            g_status = await db.get_user_state(g_id)
            g_shift = await db.get_shift_status(g_id)
            print(f'girl state = {g_status}')
            print(f'girl shift = {g_shift}')

            match g_status:
                case 'ChatConnect:chatting':
                    g_status = '–ó–∞–Ω—è—Ç–∞ üü°'
                case 'None':
                    g_status = '–û–Ω–ª–∞–π–Ω üü¢'
            print(g_status)
            print(g_shift)
            match g_shift['shift_status']:
                case 'Offline':
                    g_status = '–û—Ñ—Ñ–ª–∞–π–Ω üî¥'
                case 'Online':
                    if not g_status == '–ó–∞–Ω—è—Ç–∞ üü°':
                        g_status = '–û–Ω–ª–∞–π–Ω üü¢'
                    else:
                        g_status = '–ó–∞–Ω—è—Ç–∞ üü°'
            print(g_status)

            await aiogram_bot.send_chat_action(callback.message.chat.id, 'typing', request_timeout=1)
            g_name, g_age = girl['name'], girl['age']
            data = (f'<b>{g_name}</b>, {g_age}'
                    f'\n<b>–ò–≥—Ä—ã:</b> {girl["games"]}'
                    f'\n<b>–û —Å–µ–±–µ:</b> {girl["description"]}'
                    f'\n<b>–°—Ç–∞—Ç—É—Å:</b> {g_status}')
            avatar_paths = json.loads(girl['avatar_path'])
            print(avatar_paths)
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
            album_builder = MediaGroupBuilder()
            for avatar_path in avatar_paths:
                if await is_video(avatar_path):
                    album_builder.add_video(media=FSInputFile(avatar_path))
                elif await is_photo(avatar_path):
                    album_builder.add_photo(media=FSInputFile(avatar_path))
            if album_builder:
                await callback.message.answer_media_group(media=album_builder.build())
                await callback.message.answer(text=data, reply_markup=main_kb.g_intr_menu(g_id))
            await asyncio.sleep(random.randint(3, 7))


async def get_girl_data(g_id: int):
    girl = await db.get_girls_by_id(g_id)
    girl = girl[0]
    avatar_paths = json.loads(girl['avatar_path'])
    g_status = await db.get_user_state(g_id)
    g_shift = await db.get_shift_status(g_id)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–≤—É—à–∫–∏
    match g_status:
        case 'ChatConnect:chatting':
            g_status = '–ó–∞–Ω—è—Ç–∞ üü°'
        case 'None':
            g_status = '–û–Ω–ª–∞–π–Ω üü¢'

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ–Ω—ã
    match g_shift['shift_status']:
        case 'Offline':
            g_status = '–û—Ñ—Ñ–ª–∞–π–Ω üî¥'
        case 'Online':
            if g_status != '–ó–∞–Ω—è—Ç–∞ üü°':
                g_status = '–û–Ω–ª–∞–π–Ω üü¢'

    g_name, g_age = girl['name'], girl['age']
    data = (f'<b>{g_name}</b>, {g_age}'
            f'\n<b>–ò–≥—Ä—ã:</b> {girl["games"]}'
            f'\n<b>–û —Å–µ–±–µ:</b> {girl["description"]}'
            f'\n<b>–°—Ç–∞—Ç—É—Å:</b> {g_status}')

    g_services = await db.get_services_by_user_id(g_id)

    return {
        'avatar_paths': avatar_paths,
        'data': data,
        'services': g_services,
        'h_price': girl['price']
    }


@router.callback_query(F.data.startswith('g_intr_menu_'))
async def p_intr_menu(call: CallbackQuery, state: FSMContext):
    await call.answer()
    g_id = int(call.data.split('_')[-1])
    g_info = await get_girl_data(g_id)
    avatar_paths, g_data, g_serv = g_info['avatar_paths'], g_info['data'], g_info['services']
    if g_serv:
        for s in g_serv:
            print(s['service_name'], s['price'])

        album_builder = MediaGroupBuilder()
        for avatar_path in avatar_paths:
            if await is_video(avatar_path):
                album_builder.add_video(media=FSInputFile(avatar_path))
            elif await is_photo(avatar_path):
                album_builder.add_photo(media=FSInputFile(avatar_path))
        if album_builder:
            await call.message.answer_media_group(media=album_builder.build())
            await call.message.answer(text=g_data + '\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏: –ù–µ –≤—ã–±—Ä–∞–Ω—ã',
                                      reply_markup=main_kb.create_services_keyboard(g_serv, g_id, g_info['h_price']))
    else:
        album_builder = MediaGroupBuilder()
        for avatar_path in avatar_paths:
            if await is_video(avatar_path):
                album_builder.add_video(media=FSInputFile(avatar_path))
            elif await is_photo(avatar_path):
                album_builder.add_photo(media=FSInputFile(avatar_path))
        if album_builder:
            await call.message.answer_media_group(media=album_builder.build())
            await call.message.answer(text=g_data, reply_markup=main_kb.create_services_keyboard(g_id=g_id, h_price=g_info['h_price']))


@router.callback_query(F.data.startswith('game_'))
async def p_search_girls(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    stop_event = asyncio.Event()
    uid = callback.from_user.id
    game = callback.data.split('_')[-1]
    games_dict = {'cs2': 'CS 2', 'dota2': 'DOTA 2',
                  'val': 'VALORANT', 'apex': 'APEX',
                  'talk': '–û–±—â–µ–Ω–∏–µ'}
    game = games_dict[game]
    print(game)
    girls = await db.get_girls_by_game(game)
    random.shuffle(girls)
    print(girls)
    if girls:
        await callback.message.answer('–ó–∞–ø—É—â–µ–Ω –ø–æ–∏—Å–∫... ‚åõÔ∏è'
                                      '\n\n–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å - /stop_search')
        await aiogram_bot.send_chat_action(callback.message.chat.id, 'typing')
        await asyncio.sleep(random.randint(2, 5))
        await state.set_state(SearchGirls.searching)
        await state.update_data(event=stop_event)
        await search_girls(girls, callback, stop_event)
        await state.clear()
        # await callback.message.answer('–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.')
        # await callback.message.answer('–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω', reply_markup=main_kb.start_btns(uid))
    else:
        await callback.message.answer('–ê–Ω–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')


@router.message(Command('stop_search'))
async def stop_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    print(current_state)
    if current_state == SearchGirls.searching.state:
        stop_event = (await state.get_data())['event']
        stop_event.set()
        await message.answer('–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
        await state.clear()
        return
    else:
        await message.answer('–ü–æ–∏—Å–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω.')
        return

# @router.callback_query(F.data.startswith('bg_buy_'))
# async def p_bg_buy(callback: CallbackQuery, state: FSMContext):
#     await callback.answer()
#     g_id = int(callback.data.split('_')[-1])
#     g_status = await db.check_user_state(g_id, ChatConnect.chatting)

#
# @router.callback_query(F.data.startswith('bg_buy_'))
# async def p_bg_buy(callback: CallbackQuery, state: FSMContext):
#     await callback.answer()
#     print(callback.data)
#     g_id = int(callback.data.split('_')[-1])
#     if await db.check_user_state(g_id, ChatConnect.chatting):
#         await callback.message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–µ–≤—É—à–∫–∞ –∑–∞–Ω—è—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.')
#         return
#     if await db.get_shift_status(g_id) == 'Offline':
#         await callback.message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–µ–≤—É—à–∫–∞ –æ—Ñ—Ñ–ª–∞–π–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.')
#         return
#     g_data = await db.get_girls_by_id(g_id)
#     g_str = ''
#     for g in g_data:
#         avatar_paths = json.loads(g['avatar_path'])
#         hour_price = g['price']
#         print(avatar_paths)
#         # –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
#         album_builder = MediaGroupBuilder()
#         for avatar_path in avatar_paths:
#             if await is_video(avatar_path):
#                 album_builder.add_video(media=FSInputFile(avatar_path))
#             elif await is_photo(avatar_path):
#                 album_builder.add_photo(media=FSInputFile(avatar_path))
#         if album_builder:
#             await callback.message.answer_media_group(media=album_builder.build())
#             await callback.message.answer(text='–ö–∞–∫–æ–π —Ç–æ —Ç–µ–∫—Å—Ç', reply_markup=main_kb.buy_girl(g_id, hour_price))



# @router.callback_query(F.data.startswith('buy_girl_'))
# async def p_bg_buy(call: CallbackQuery, state: FSMContext):
#     await call.answer()
#     g_id = call.data.split('_')[-2]
#     g_price = call.data.split('_'[-1])
#     msg = await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤:')
#     mkup = main_kb.web_q(g_price, msg.message_id, g_id)
#     await aiogram_bot.edit_message_reply_markup(
#         chat_id=call.message.chat.id,
#         message_id=msg.message_id,
#         reply_markup=mkup
#     )


# @router.callback_query(F.data.startswith('web_q_y_'))
# async def p_bg_web_y(call: CallbackQuery, state: FSMContext):
#     await call.answer()
#     g_id = call.data.split('_')[-1]
#     g_price = int(call.data.split('_')[-2]) + 200
#
#     del_mes = call.data.split('_')[-3]
#     await aiogram_bot.delete_message(call.message.chat.id, int(del_mes))
#     msg = await call.message.answer(f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞:</b> {g_price} —Ä—É–±–ª–µ–π.\n–í—ã –±—É–¥–µ—Ç–µ –æ–¥–∏–Ω?')
#     mkup = main_kb.alone_q(g_price, msg.message_id, g_id)
#     await aiogram_bot.edit_message_reply_markup(
#         chat_id=call.message.chat.id,
#         message_id=msg.message_id,
#         reply_markup=mkup
#     )


# @router.callback_query(F.data.startswith('web_q_n_'))
# async def p_bg_web_n(call: CallbackQuery, state: FSMContext):
#     await call.answer()
#     g_id = call.data.split('_')[-1]
#     g_price = int(call.data.split('_')[-2])
#     del_mes = call.data.split('_')[-3]
#     await aiogram_bot.delete_message(call.message.chat.id, int(del_mes))
#     msg = await call.message.answer(f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞:</b> {g_price} —Ä—É–±–ª–µ–π.\n–í—ã –±—É–¥–µ—Ç–µ –æ–¥–∏–Ω?')
#     mkup = main_kb.alone_q(g_price, msg.message_id, g_id)
#     await aiogram_bot.edit_message_reply_markup(
#         chat_id=call.message.chat.id,
#         message_id=msg.message_id,
#         reply_markup=mkup
#     )


# @router.callback_query(F.data.startswith('alone_q_y_'))
# async def p_alone_q_y(call: CallbackQuery, state: FSMContext):
#     await call.answer()
#     g_id = call.data.split('_')[-1]
#     g_price = int(call.data.split('_')[-2]) + 200
#     del_mes = call.data.split('_')[-3]
#     await aiogram_bot.delete_message(call.chat.id, int(del_mes))
#     msg = await call.message.answer(f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞:</b> {g_price} —Ä—É–±–ª–µ–π.')
#
#
#
# @router.callback_query(F.data.startswith('alone_q_n_'))
# async def p_alone_q_n(call: CallbackQuery, state: FSMContext):
#     await call.answer()
#     g_id = call.data.split('_')[-1]
#     g_price = int(call.data.split('_')[-2])
#     del_mes = call.data.split('_')[-3]
#     await aiogram_bot.delete_message(call.message.chat.id, int(del_mes))
#     msg = await call.message.answer(f'–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ª—é–¥–µ–π?')
#     await state.set_state(PeopleCount.input_ppl)
#     await state.update_data(g_id=g_id, g_price=g_price, msg=msg)


# @router.message(PeopleCount.input_ppl, lambda message: message.text.isdigit() and int(message.text) <= 10)
# async def p_bg_buy_wppl(message: Message, state: FSMContext):
#     ppl = int(message.text)
#     data = await state.get_data()
#     await state.clear()
#     ttl_price = int(data['g_price']) + ppl * 10
#     await state.set_state(BuyGirl.input_hours)
#     g_id = data['g_id']
#     await state.update_data(g_id=g_id)
#     await state.update_data(price=ttl_price)
#     g_data = await db.get_girls_by_id(int(g_id))
#     await message.answer(f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞:</b> {ttl_price} —Ä—É–±–ª–µ–π'
#                          '\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <b>—á–∞—Å–æ–≤ (—Ü–∏—Ñ—Ä–∞)</b>: ')
#     await state.set_state(BuyGirl.process_req)



@router.callback_query(F.data.startswith('complete_buy_girl_'))
async def p_bg_buy(call: CallbackQuery, state: FSMContext):
    # action after payment button pressed with servs
    print('serv_handler')
    await call.answer()
    print(len(call.data.split('_')))
    if len(call.data.split('_')) == 7:
        g_id = int(call.data.split('_')[-2])
        g_price = call.data.split('_')[-3]
        g_data = await db.get_girls_by_id(int(g_id))
        serv_price = call.data.split('_')[-1]
        ttl_hours = call.data.split('_')[-4]
        print(g_id, g_price, serv_price)
    else:
        g_id = int(call.data.split('_')[-1])
        g_price = call.data.split('_')[-2]
        serv_price = 0
        print(g_id, g_price)
        await call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥–∏')
        return
    print(call.data)
    g_state = await db.get_user_state(g_id)
    print(g_state)
    g_status = await db.check_user_state(g_id, ChatConnect.chatting)
    if g_status:
        await call.message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–µ–≤—É—à–∫–∞ –∑–∞–Ω—è—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.')
        return
    g_shift = await db.get_shift_status(g_id)
    if g_shift['shift_status'] == 'Offline':
        await call.message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–µ–≤—É—à–∫–∞ –æ—Ñ—Ñ–ª–∞–π–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.')
        return
    await state.set_state(BuyGirl.web_q)

    print(g_id, g_price, serv_price)
    await state.update_data(g_id=g_id, price=g_price, serv_price=serv_price, ttl_hours=ttl_hours)
    await call.message.answer(f'–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ–±—ã –¥–µ–≤—É—à–∫–∞ –≤–∫–ª—é—á–∏–ª–∞ –≤–µ–±-–∫–∞–º–µ—Ä—É?'
                              f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {g_price} —Ä—É–±–ª–µ–π', reply_markup=main_kb.u_webcam_req())


@router.callback_query(F.data.startswith('cbg_noserv_'))
async def p_bg_buy(call: CallbackQuery, state: FSMContext):
    # action after payment button pressed with no additional services
    print('noserv_handler')
    await call.answer()
    data_split = call.data.split('_')
    g_id = int(data_split[-1])
    g_status = await db.check_user_state(g_id, ChatConnect.chatting)
    if g_status:
        await call.message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–µ–≤—É—à–∫–∞ –∑–∞–Ω—è—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.')
        return
    g_shift = await db.get_shift_status(g_id)
    if g_shift['shift_status'] == 'Offline':
        await call.message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–µ–≤—É—à–∫–∞ –æ—Ñ—Ñ–ª–∞–π–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.')
        return
    await state.set_state(BuyGirl.web_q)
    print(call.data)
    g_price = data_split[-2]
    g_data = await db.get_girls_by_id(int(g_id))
    print(g_id, g_price)
    await state.update_data(g_id=g_id, price=g_price)
    await call.message.answer(f'–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ–±—ã –¥–µ–≤—É—à–∫–∞ –≤–∫–ª—é—á–∏–ª–∞ –≤–µ–±-–∫–∞–º–µ—Ä—É?'
                              f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {g_price} —Ä—É–±–ª–µ–π', reply_markup=main_kb.u_webcam_req())


@router.message(BuyGirl.process_req, lambda message: message.text.isdigit() and 1 <= int(message.text) <= 12)
async def p_buy(message: Message, state: FSMContext):
    g_username = None
    ppl_cnt = int(message.text)
    await state.update_data(ppl_cnt=ppl_cnt)
    g_data = await state.get_data()
    ttl_ppl_price = int(g_data['price_per_ppl']) * ppl_cnt
    ttl_hours = g_data['ttl_hours']
    uid = message.from_user.id
    username = message.from_user.username
    g_id = g_data["g_id"]
    web_price = int(g_data["price"])
    serv_price = g_data.get('serv_price', 0)
    g_price = 0
    if g_data['webcam'] == 'yes':
        ttl_price = g_price + int(serv_price) + ttl_ppl_price + int(web_price)
    else:
        ttl_price = g_price + int(serv_price) + ttl_ppl_price
    user_balance = await db.get_user_balance(uid)
    if user_balance < ttl_price:
        await message.answer('–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ <b>–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>.'
                             f'\n<b>–ë–∞–ª–∞–Ω—Å: </b> {user_balance} —Ä—É–±.'
                             f'\n<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: </b> {ttl_price} —Ä—É–±.',
                             reply_markup=main_kb.buy_girl_fxd(g_id, ttl_price, ttl_hours))
        await state.clear()
    else:
        g_data = await db.get_girls_by_id(int(g_id))
        girl_payment = (67 / 100) * ttl_price
        logger.info(f'girl payment" {girl_payment}')
        await db.withdraw_from_balance(uid, ttl_price)
        await db.top_up_girl_balance(int(g_id), int(girl_payment))
        for g in g_data:
            g_username = g['username']
        await message.answer(f'<b>–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –¥–æ—Å—Ç—É–ø.</b> '
                             f'\n–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ <b>{ttl_price} —Ä—É–±</b>.'
                             f'\n\n–ü–æ–ª—É—á–µ–Ω–æ <b>{ttl_hours}</b> —á–∞—Å–æ–≤ –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏'
                             '\n<b>–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!</b>')

        adm_text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –¥–µ–≤—É—à–∫–µ {g_username}. –°—É–º–º–∞: {ttl_price} —Ä—É–±.'
        if uid != 46281319:
            await inform_admins(adm_text)
        await state.clear()
        await send_chat_request(ttl_hours, message, g_id, state, uid)


@router.callback_query(F.data.startswith('webcam_req_y_'))
async def p_webcam_y(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(webcam='yes')
    await call.message.edit_text('–í—ã –±—É–¥–µ—Ç–µ –æ–¥–∏–Ω?', reply_markup=main_kb.additional_part_req())


@router.callback_query(F.data.startswith('webcam_req_n_'))
async def p_webcam_n(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(webcam='no')
    await call.message.edit_text('–í—ã –±—É–¥–µ—Ç–µ –æ–¥–∏–Ω?', reply_markup=main_kb.additional_part_req())


@router.callback_query(F.data.startswith('add_part_req_n_'))
async def p_alone_q_n(call: CallbackQuery, state: FSMContext):
    await call.answer()
    data = await state.get_data()
    print(data)
    g_data = await db.get_girls_by_id(int(data["g_id"]))
    price_per_ppl = 0
    for r in g_data:
        price_per_ppl = r['price_per_ppl']
    await state.set_state(BuyGirl.process_req)
    await state.update_data(price_per_ppl=price_per_ppl)
    await call.message.edit_text(f'–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {price_per_ppl} —Ä—É–±–ª–µ–π –∑–∞ —á–µ–ª–æ–≤–µ–∫–∞.'
                              f'\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π:')


@router.message(BuyGirl.alone_q, lambda message: message.text.isdigit() and 0 < int(message.text) < 20)
async def p_alone_q_n(message: Message, state: FSMContext):
    ppl_cnt = int(message.text)
    await state.update_data(ppl_cnt=ppl_cnt)


@router.message(BuyGirl.alone_q, lambda message: message.text.isdigit() and 0 < int(message.text) < 20)
async def p_alone_q_y(message: Message, state: FSMContext):
    await message.answer('–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª-–≤–æ –ª—é–¥–µ–π. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ü–∏—Ñ—Ä–∞ –æ—Ç 1 –¥–æ 20.')
    return


@router.callback_query(F.data.startswith('add_part_req_y_'))
async def p_alone_q_n(call: CallbackQuery, state: FSMContext):
    await call.answer()
    g_data = await state.get_data()
    uid = call.from_user.id
    username = call.message.from_user.username
    print(g_data)
    g_id = g_data["g_id"]
    web_price = int(g_data["price"])
    serv_price = g_data.get('serv_price', 0)
    ttl_hours = g_data['ttl_hours']
    g_price = 0
    if g_data['webcam'] == 'yes':
        ttl_price = g_price + int(serv_price) + int(web_price)
    else:
        ttl_price = g_price + int(serv_price)
    user_balance = await db.get_user_balance(uid)
    print(user_balance)
    print('ttl_price', ttl_price)
    if user_balance < ttl_price:
        await call.message.edit_text('–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ <b>–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>.'
                             f'\n<b>–ë–∞–ª–∞–Ω—Å: </b> {user_balance} —Ä—É–±.'
                             f'\n<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: </b> {ttl_price} —Ä—É–±.',
                             reply_markup=main_kb.buy_girl_fxd(g_id, ttl_price, ttl_hours))
        await state.clear()
    else:
        g_data = await db.get_girls_by_id(int(g_id))
        girl_payment = (67 / 100) * ttl_price
        logger.info(f'girl payment" {girl_payment}')
        await db.withdraw_from_balance(uid, ttl_price)
        await db.top_up_girl_balance(int(g_id), int(girl_payment))
        for g in g_data:
            g_username = g['username']
        await call.message.edit_text(f'<b>–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –¥–æ—Å—Ç—É–ø.</b> '
                             f'\n–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ <b>{ttl_price} —Ä—É–±</b>.'
                             f'\n\n–ü–æ–ª—É—á–µ–Ω–æ <b>{ttl_hours}</b> —á–∞—Å–æ–≤ –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏'
                             '\n<b>–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!</b>')

        adm_text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –¥–µ–≤—É—à–∫–µ {g_username}. –°—É–º–º–∞: {ttl_price} —Ä—É–±.'
        if uid != 46281319:
            await inform_admins(adm_text)
        await state.clear()
        await send_chat_request(ttl_hours, call, g_id, state, uid)


@router.callback_query(F.data == 'cancel_buy_girl')
async def p_cbg(callback: CallbackQuery):
    await p_select_game(callback)


@router.callback_query(F.data.startswith('decline_'))
async def p_dec_chat(call: CallbackQuery, state: FSMContext):
    user_1_id = call.data.split('_')[-1]
    await call.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å —á–∞—Ç–∞.")
    await aiogram_bot.send_message(user_1_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç.")
    await state.clear()
    await call.answer()
    await db.set_user_state(user_1_id, 'None')


@router.callback_query(F.data.startswith('accept_'))
async def p_acc_chat(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ChatConnect.waiting_for_user2_approval)
    user_1_id = int(callback.data.split('_')[-1])
    hours = int(callback.data.split('_')[-2])
    user_2_id = callback.from_user.id

    # storage = MemoryStorage()
    # user1_state = FSMContext(storage=storage, key=StorageKey(bot_id=aiogram_bot.id, chat_id=user_1_id, user_id=user_1_id))
    # user2_state = FSMContext(storage=storage, key=StorageKey(bot_id=aiogram_bot.id, chat_id=user_2_id, user_id=user_2_id))
    await callback.answer()
    await callback.message.edit_text("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —á–∞—Ç."
                                     "\n\n<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º:</b> "
                                     "\n<b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —á–∞—Ç–∞:</b> /remaining_time"
                                     "\n<b>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Ç:</b> /stop_chat", reply_markup=None)
    await callback.message.answer('–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ "—Å—Å—ã–ª–∫–∞ –¥–∏—Å–∫–æ—Ä–¥–∞", –∑–∞–π–º–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–æ–º–Ω–∞—Ç—É, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –µ–≥–æ –∏–∑ –ª–æ–±–±–∏ –æ–∂–∏–¥–∞–Ω–∏—è')
    await aiogram_bot.send_message(user_1_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É. –ß–∞—Ç –∑–∞–ø—É—â–µ–Ω."
                                              "\n–í–∞–º –±—ã–ª –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: 10 –º–∏–Ω—É—Ç —á–∞—Ç–∞."
                                              "\n\n<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º:</b> "
                                              "\n<b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —á–∞—Ç–∞:</b> /remaining_time"
                                              "\n<b>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Ç:</b> /stop_chat")
    await aiogram_bot.send_message(user_1_id, '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ "—Å—Å—ã–ª–∫–∞ –¥–∏—Å–∫–æ—Ä–¥–∞", –∑–∞–π–¥–∏—Ç–µ –≤ Waiting Room, —Å–æ–æ–±—â–∏—Ç–µ –¥–µ–≤—É—à–∫–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –≤ Telegram —á–∞—Ç–µ')
    await state.set_state(ChatConnect.chatting)
    await state.update_data(user_1=user_1_id, user_2=user_2_id)
    await db.set_user_state(user_2_id, state=await state.get_state())
    task = asyncio.create_task(chat_timer(user_1_id, user_2_id, hours))
    print(f'{hours=}')
    print('user_2_state')
    print(await state.get_state())


@router.message(Command('remaining_time'))
async def remaining_time_command(message: Message):
    user_id = message.from_user.id
    if user_id in timers:
        end_time = timers[user_id]['end']
        remaining = end_time - datetime.now()
        if remaining.total_seconds() > 0:
            hours, remainder = divmod(remaining.total_seconds(), 3600)
            minutes, seconds = divmod(remainder, 60)
            await message.answer(f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {int(hours)} —á–∞—Å–æ–≤, {int(minutes)} –º–∏–Ω—É—Ç, {int(seconds)} —Å–µ–∫—É–Ω–¥.")
        else:
            await message.answer("–ß–∞—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è.")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.")


@router.message(ChatConnect.chatting)
async def handle_message(message: Message, state: FSMContext):
    data = await state.get_data()
    user_1_id, user_2_id = data['user_1'], data['user_2']
    match message.text:
        case '/stop_chat':
            await message.answer('–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.')
            await db.set_user_state(user_1_id, 'None')
            await db.set_user_state(user_2_id, 'None')
            if user_1_id in timers:
                del timers[user_1_id]
            if user_2_id in timers:
                del timers[user_2_id]
            await state.clear()
            return
        case '/remaining_time':
            await remaining_time_command(message)
        case '/cancel_timer':
            await cancel_timer_command(message)

    if message.from_user.id == user_1_id:
        recipient_id = user_2_id
    else:
        recipient_id = user_1_id
    rec_state = await db.check_user_state(recipient_id, ChatConnect.chatting)
    if rec_state:
        await aiogram_bot.send_message(recipient_id, message.text)
    else:
        await message.answer('–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.')
        await db.set_user_state(user_1_id, 'None')
        await db.set_user_state(user_2_id, 'None')
        await state.clear()


@router.message(Command('stop_chat'))
async def p_c_stop_chat(message: Message, state: FSMContext):
    if await state.get_state() == ChatConnect.chatting:
        await message.answer('–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.')
        await db.set_user_state(message.from_user.id, 'None')
        await state.clear()


@router.message(Command('cancel_timer'))
async def cancel_timer_command(message: Message):
    user_id = message.from_user.id
    if user_id in timers and 'task' in timers[user_id]:
        timers[user_id]['task'].cancel()  # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
        del timers[user_id]  # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        await message.answer("–¢–∞–π–º–µ—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


